#!/bin/bash

curl -s https://raw.githubusercontent.com/NodEligible/programs/main/display_logo.sh | bash

# –°–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
YELLOW='\e[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[38;5;81m'
NC='\033[0m' # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Main...${NC}"
bash <(curl -s https://raw.githubusercontent.com/NodEligible/programs/main/main.sh)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}Main —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
else
    echo -e "${RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Main!${NC}"
fi

echo -e "${YELLOW}–£–¥–∞–ª—è–µ–º –Ω–æ–¥—É –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...${NC}"
docker stop watchtower &>/dev/null || true
docker stop brinxai_relay_amd64 &>/dev/null || true
docker stop brinxai_relay_arm64 &>/dev/null || true
docker rm -f brinxai_relay_amd64 &>/dev/null
docker rm -f brinxai_relay_arm64 &>/dev/null
docker rmi -f admier/brinxai_nodes-relay &>/dev/null
docker rmi -f containrrr/watchtower &>/dev/null

echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ BrixAI Relay${NC}"
ARCH=$(dpkg --print-architecture)

if [ "$ARCH" = "amd64" ]; then
    URL="https://raw.githubusercontent.com/admier1/BrinxAI-Relay-Nodes/main/install_brinxai_relay_amd64.sh"
else
    URL="https://raw.githubusercontent.com/admier1/BrinxAI-Relay-Nodes/main/install_brinxai_relay_arm64.sh"
fi

CONTAINER_NAME="brinxai_relay_amd64"

tmpfile=$(mktemp)
curl -s "$URL" -o "$tmpfile"
bash "$tmpfile"
rm "$tmpfile"

echo -e "${YELLOW}–§–∏–∫—Å...${NC}"
VOLUME_PATH=$(docker inspect "$CONTAINER_NAME" --format '{{ range .Mounts }}{{ if eq .Destination "/etc/openvpn" }}{{ .Source }}{{ end }}{{ end }}')
if [ -z "$VOLUME_PATH" ]; then
  echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–º /etc/openvpn –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ $CONTAINER_NAME${NC}"
  exit 1
fi

# -------------------------------------------------------------
delay_minutes=1
total_seconds=$((delay_minutes * 60))

icons=("‚è≥" "üïê" "üïë" "üïí" "üïì" "üïî" "üïï" "üïñ" "üïó" "üïò" "üïô" "üïö" "üïõ")

echo -e "\n${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ $delay_minutes –º–∏–Ω—É—Ç...${NC}"

for ((i=total_seconds; i>0; i--)); do
    icon=${icons[$((i % ${#icons[@]}))]}  # –û–±–∏—Ä–∞—î–º–æ "–∂–∏–≤—É" —ñ–∫–æ–Ω–∫—É
    printf "\r${BLUE}$icon –û—Å—Ç–∞–ª–æ—Å—å: %02d:%02d ${NC}" $((i/60)) $((i%60))
    sleep 1
done

echo -e "\n${GREEN}‚úÖ –í—Ä–µ–º—è –≤—ã—à–ª–æ!${NC}"

# -------------------------------------------------------------

TA_KEY_PATH=$(find "$VOLUME_PATH" -type f -name "ta.key" | head -n 1)
if [ -z "$TA_KEY_PATH" ]; then
  echo -e "${RED}–§–∞–π–ª ta.key –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${VOLUME_PATH}${NC}"
  exit 1
fi

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ ‚Äî –Ω—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞
cp "$TA_KEY_PATH" "$VOLUME_PATH"
if [ $? -eq 0 ]; then
  echo -e "${GREEN}–§–∞–π–ª ta.key —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ ${VOLUME_PATH}${NC}"
else
  echo -e "${RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ta.key${NC}"
fi

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
CONF_FILE="${VOLUME_PATH}/openvpn.conf"
sed -i 's/^push ".*redirect-gateway def1.*"$/push "redirect-gateway def1 bypass-dhcp"/' "$CONF_FILE"

echo -e "${YELLOW}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${NC}"
docker restart "$CONTAINER_NAME"

