#!/bin/bash

curl -s https://raw.githubusercontent.com/NodEligible/programs/refs/heads/main/display_logo.sh | bash

YELLOW='\e[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'


echo -e "${YELLOW}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤...${NC}"
sudo apt update -y

echo -e "${YELLOW}üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Main...${NC}"
bash <(curl -s https://raw.githubusercontent.com/NodEligible/programs/refs/heads/main/main.sh)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Main —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Main!${NC}"
fi

echo -e "${YELLOW}üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ufw...${NC}" 
bash <(curl -s https://raw.githubusercontent.com/NodEligible/programs/refs/heads/main/ufw.sh)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Ufw —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Ufw!${NC}"
fi

sudo apt install gawk bison build-essential manpages-dev ca-certificates -y 

echo -e "${YELLOW}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PIPE_TESTNET ...${NC}"

USERNAME="popcache"
LOGROTATE_FILE="/etc/logrotate.d/popcache"

if id "$USERNAME" &>/dev/null; then
    echo -e "${YELLOW}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å${NC} '$USERNAME' ${YELLOW}—Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
else
    sudo useradd -m -s /bin/bash "$USERNAME"
    echo -e "${GREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å${NC} '$USERNAME' ${GREEN}—Å–æ–∑–¥–∞–Ω.${NC}"
fi
sudo usermod -aG sudo "$USERNAME"

sudo tee /etc/sysctl.d/99-popcache.conf > /dev/null << "EOL"
net.ipv4.ip_local_port_range = 1024 65535
net.core.somaxconn = 65535
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.core.wmem_max = 16777216
net.core.rmem_max = 16777216
EOL

sudo sysctl --system &>/dev/null

sudo tee /etc/security/limits.d/popcache.conf > /dev/null << "EOL"
*    hard nofile 65535
*    soft nofile 65535
EOL


sudo mkdir -p /opt/popcache
cd /opt/popcache

ldd_version=$(ldd --version | head -n1 | awk '{print $NF}')

if [[ "$ldd_version" == "2.39" ]]; then
    while true; do
        echo -e "${YELLOW}–ö–∞–∫–æ–π –±–∏–Ω–∞—Ä–Ω–∏–∫ –∫–∞—á–∞–µ–º,${NC} x64 –∏–ª–∏ ARM? (1 - x64 / 2 - ARM)"
        read -rp "–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: " choice
        case "$choice" in
            1)
                url="https://download.pipe.network/static/pop-v0.3.0-linux-x64.tar.gz"
                wget "$url" &>/dev/null
                tar -xf pop-v0.3.0-linux-x64.tar.gz &>/dev/null
                break
                ;;
            2)
                url="https://download.pipe.network/static/pop-v0.3.0-linux-arm64.tar.gz"
                wget "$url" &>/dev/null
                tar -xf pop-v0.3.0-linux-arm64.tar.gz &>/dev/null
                break
                ;;
            *)
                echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ${NC} 1 ${YELLOW}–∏–ª–∏${NC} 2."
                ;;
        esac
    done
    chmod +x pop
    pop_cmd="/opt/popcache/pop"
else
    echo -e "${YELLOW}–ë–∏–ª–¥–∏–º –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é glibc (2.39)${NC}"
    # ubuntu 22.04 compatability
    mkdir -p /opt/glibc-build
    cd /opt/glibc-build
    
    # installing glibc 2.39
    wget http://ftp.gnu.org/gnu/libc/glibc-2.39.tar.gz 
    tar -xf glibc-2.39.tar.gz &>/dev/null
    mkdir glibc-2.39-build glibc-2.39-install
    cd glibc-2.39-build
    ../glibc-2.39/configure --prefix=/opt/glibc-build/glibc-2.39-install &>/dev/null
    make -j$(nproc) &>/dev/null
    make install &>/dev/null

    sudo chown -R root:root /opt/glibc-build
    chmod -R a+rx /opt/glibc-build
    
    # downloading pop binary
    cd /opt/popcache
    wget https://download.pipe.network/static/pop-v0.3.0-linux-x64.tar.gz 
    tar -xf pop-v0.3.0-linux-x64.tar.gz 
    chmod +x pop
    
    pop_cmd="/opt/glibc-build/glibc-2.39-install/lib/ld-linux-x86-64.so.2 --library-path \"/opt/glibc-build/glibc-2.39-install/lib:/usr/lib/x86_64-linux-gnu/\" /opt/popcache/pop"
fi

read -rp "–í–≤–µ–¥–∏—Ç–µ Solana public key: " solana_addr
read -rp "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥: " invite_code
read -rp "–í–≤–µ–¥–∏—Ç–µ Pop Name(–∏–º—è) –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞: " pop_name
read -rp "–í–≤–µ–¥–∏—Ç–µ Pop Location(–°—Ç—Ä–∞–Ω—É) –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞: " pop_location

if [ -e /opt/popcache/config.json ]; then
  read -rp "config.json —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? [y/N]: " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª config.json.${NC}"
  else
    cat > /opt/popcache/config.json <<EOF
{
  "pop_name": "$pop_name",
  "pop_location": "$pop_location",
  "invite_code": "$invite_code",
  "server": {
    "host": "0.0.0.0",
    "port": 443,
    "http_port": 80,
    "workers": 40
  },
  "cache_config": {
    "memory_cache_size_mb": 4096,
    "disk_cache_path": "./cache",
    "disk_cache_size_gb": 100,
    "default_ttl_seconds": 86400,
    "respect_origin_headers": true,
    "max_cacheable_size_mb": 1024
  },
  "api_endpoints": {
    "base_url": "https://dataplane.pipenetwork.com"
  },
  "identity_config": {
    "node_name": "your-node-name",
    "name": "Your Name",
    "email": "your.email@example.com",
    "website": "https://your-website.com",
    "discord": "your_discord_username",
    "telegram": "your_telegram_handle",
    "solana_pubkey": "$solana_addr"
  }
}
EOF
  fi
else
  cat > /opt/popcache/config.json <<EOF
{
  "pop_name": "$pop_name",
  "pop_location": "$pop_location",
  "invite_code": "$invite_code",
  "server": {
    "host": "0.0.0.0",
    "port": 443,
    "http_port": 80,
    "workers": 40
  },
  "cache_config": {
    "memory_cache_size_mb": 4096,
    "disk_cache_path": "./cache",
    "disk_cache_size_gb": 100,
    "default_ttl_seconds": 86400,
    "respect_origin_headers": true,
    "max_cacheable_size_mb": 1024
  },
  "api_endpoints": {
    "base_url": "https://dataplane.pipenetwork.com"
  },
  "identity_config": {
    "node_name": "your-node-name",
    "name": "Your Name",
    "email": "your.email@example.com",
    "website": "https://your-website.com",
    "discord": "your_discord_username",
    "telegram": "your_telegram_handle",
    "solana_pubkey": "$solana_addr"
  }
}
EOF
fi


sudo mkdir -p /opt/popcache/logs
sudo chown -R popcache:popcache /opt/popcache

SERVICE_NAME="popcache.service"
SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"
# —É–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ —É–∂–µ —Å—Ç–æ–∏—Ç
echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ dcdnd...${NC}"
if systemctl list-units --type=service --all | grep -q "$SERVICE_NAME"; then
    sudo systemctl stop "$SERVICE_NAME"
    sudo systemctl disable "$SERVICE_NAME"
    if [ -f "$SERVICE_FILE" ]; then
        sudo rm "$SERVICE_FILE"
    fi
    sudo systemctl daemon-reload
    echo -e "${GREEN}–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π${NC} $SERVICE_NAME ${GREEN}—É–¥–∞–ª–µ–Ω.${NC}"
fi

echo -e "${YELLOW}‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...${NC}"

sudo tee /etc/systemd/system/popcache.service > /dev/null <<EOL
[Unit]
Description=POP Cache Node
After=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=/opt/popcache
ExecStart=$pop_cmd
Restart=always
RestartSec=5
LimitNOFILE=65535
StandardOutput=append:/opt/popcache/logs/stdout.log
StandardError=append:/opt/popcache/logs/stderr.log
Environment=POP_CONFIG_PATH=/opt/popcache/config.json
Environment=POP_INVITE_CODE=$invite_code

[Install]
WantedBy=multi-user.target
EOL

sudo systemctl daemon-reexec
sudo systemctl daemon-reload

sudo systemctl enable popcache
sudo service popcache start
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å popcache –∑–∞–ø—É—â–µ–Ω!${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞!${NC}"
fi

sudo touch "$LOGROTATE_FILE"
sudo chmod 0640 "$LOGROTATE_FILE"
sudo chown popcache:popcache "$LOGROTATE_FILE"

sudo bash -c "cat > $LOGROTATE_FILE << EOL
/opt/popcache/logs/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 0640 popcache popcache
    sharedscripts
    postrotate
        systemctl reload popcache >/dev/null 2>&1 || true
    endscript
}
EOL"
sudo mkdir -p /opt/popcache/logs
sudo chown -R "$USER:$GROUP" /opt/popcache/logs

echo -e "${GREEN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PIPE_TESTNET –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"

